{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","put","Filter","props","value","newFilter","onChange","handleFilter","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","dataToShow","map","persons","key","name","number","onClick","deletePerson","Notification","notification","className","ErrorNotification","errorNotification","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setNotification","setError","useEffect","personService","then","response","data","console","log","length","replaceNumber","person","find","n","changedPerson","catch","error","setTimeout","filter","toLowerCase","includes","event","target","preventDefault","nameObject","item","window","confirm","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3b1ad7c3.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\nconst replace = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n  }\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  remove: remove,\r\n  replace: replace\r\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Filter = (props) => {\n  return (\n    <div>\n        filter shown with: <input\n        value={props.newFilter}\n        onChange={props.handleFilter}\n        />\n      </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addName}>\n      <div>\n        name: <input \n        value={props.newName}\n        onChange={props.handleNameChange}\n        />\n      </div>\n      <div>\n        number: <input \n        value={props.newNumber}\n        onChange={props.handleNumberChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = (props) => {\n  \n  return(\n    <div>\n      {props.dataToShow.map(persons =>\n        <p key={persons.id}>\n          {persons.name} {persons.number} <button onClick={() => props.deletePerson(persons.id, persons.name)}>delete</button>\n        </p>\n        )}\n    </div>\n  )\n}\n\nconst Notification = ({ notification }) => {\n  if (notification === null) {\n    return null;\n  }\n  return (\n    <div>\n      <div className=\"notification\">\n        {notification}\n      </div>\n    </div>\n  )\n}\n\nconst ErrorNotification = ({ errorNotification }) => {\n  if (errorNotification === null) {\n    return null;\n  }\n  return (\n    <div>\n      <div className=\"errorNotification\">\n        {errorNotification}\n      </div>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter] = useState('')\n  const [ notification, setNotification] = useState(null)\n  const [ errorNotification, setError ] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n  console.log('render', persons.length, 'persons')\n\n\n  const addName = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber,\n      //id: persons.length + 1\n    }\n\n    const item = persons.find(item => item.name === newName)\n    \n    if (item) {\n      const nameWarning = window.confirm(`${newName} already exists in the phonebook, replace the old number with a new one?`)\n      if (nameWarning){\n        replaceNumber(item.id)\n      } else {\n        console.log('number not updated')\n      }\n    } \n    \n    else {\n      personService\n      .create(nameObject)\n      .then(response => {\n        setPersons(persons.concat(response.data))\n        setNewName('')\n        setNewNumber('')\n        setNotification(`Person '${newName}' was added to the phonebook`)\n        setTimeout(() => {\n          setNotification(null)\n        }, 3000)\n      })\n    }\n  }\n\n  const replaceNumber = (id) => {\n    const person = persons.find(n => n.id === id)\n    const changedPerson = {...person, number: newNumber}\n\n    personService\n    .replace(id, changedPerson)\n    .then(response => {\n      setPersons(persons.map(person => person.id !== id ? person : response.data))\n    })\n    .catch(error => {\n      console.log(`the person '${person.name}' no longer exists in the phonebook`)\n      setError(`the person '${person.name}' no longer exists in the phonebook`)\n      setTimeout(() => {\n        setError(null)\n      }, 3000)\n    },\n      setPersons(persons.filter(n => n.id !== id))\n    )\n    console.log(`${person.name}'s number was changed to the phonebook`)\n    setNotification(`${person.name}'s number was changed to the phonebook`)\n        setTimeout(() => {\n          setNotification(null)\n        }, 3000)\n  }\n\n  const deletePerson = (id, name) => {\n    const deleteWarning = window.confirm(`Delete ${name}?`)\n    if (deleteWarning) {\n      personService\n      .remove(id)\n      setNotification(`The person '${name}' was deleted from the phonebook`)\n        setTimeout(() => {\n          setNotification(null)\n        }, 3000)\n    } else {\n      console.log('delete not confirmed')\n    }\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n  const handleFilter = (event) => {\n    console.log(event.target.value)\n    setNewFilter(event.target.value)\n  }\n\n  const dataToShow = persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <ErrorNotification errorNotification={errorNotification}/>\n      <Filter newFilter={newFilter}\n      handleFilter={handleFilter}\n       />\n      <h2>add a new number</h2>\n      <PersonForm addName={addName}\n      newName={newName}\n      newNumber={newNumber}\n      handleNameChange={handleNameChange}\n      handleNumberChange={handleNumberChange}     \n      />\n      <h2>Numbers</h2>\n      <Persons dataToShow={dataToShow}\n      deletePerson={deletePerson} />\n    </div>\n  )\n\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}